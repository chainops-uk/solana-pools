// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dao

import (
	"github.com/dfuse-io/solana-go"
	"github.com/everstake/solana-pools/internal/dao/dmodels"
	"github.com/everstake/solana-pools/internal/dao/postgres"
	uuid "github.com/satori/go.uuid"
	"sync"
)

// Ensure, that PostgresMock does implement Postgres.
// If this is not the case, regenerate this file with moq.
var _ Postgres = &PostgresMock{}

// PostgresMock is a mock implementation of Postgres.
//
// 	func TestSomethingThatUsesPostgres(t *testing.T) {
//
// 		// make and configure a mocked Postgres
// 		mockedPostgres := &PostgresMock{
// 			CreatePoolValidatorDataFunc: func(pools ...*dmodels.PoolValidatorData) error {
// 				panic("mock out the CreatePoolValidatorData method")
// 			},
// 			DeleteDeFisFunc: func(cond *postgres.DeFiCondition) error {
// 				panic("mock out the DeleteDeFis method")
// 			},
// 			DeleteValidatorsFunc: func(poolID uuid.UUID) error {
// 				panic("mock out the DeleteValidators method")
// 			},
// 			GetCoinByIDFunc: func(id uuid.UUID) (*dmodels.Coin, error) {
// 				panic("mock out the GetCoinByID method")
// 			},
// 			GetCoinsFunc: func(cond *postgres.CoinCondition) ([]*dmodels.Coin, error) {
// 				panic("mock out the GetCoins method")
// 			},
// 			GetCoinsCountFunc: func(cond *postgres.CoinCondition) (int64, error) {
// 				panic("mock out the GetCoinsCount method")
// 			},
// 			GetDEFIsFunc: func(cond *postgres.DeFiCondition) ([]*dmodels.DEFI, error) {
// 				panic("mock out the GetDEFIs method")
// 			},
// 			GetGovernanceFunc: func(cond *postgres.GovernanceCondition) ([]*dmodels.Governance, error) {
// 				panic("mock out the GetGovernance method")
// 			},
// 			GetGovernanceCountFunc: func(cond *postgres.GovernanceCondition) (int64, error) {
// 				panic("mock out the GetGovernanceCount method")
// 			},
// 			GetLastEpochPoolDataFunc: func(PoolID uuid.UUID, currentEpoch uint64) (*dmodels.PoolData, error) {
// 				panic("mock out the GetLastEpochPoolData method")
// 			},
// 			GetLastPoolDataFunc: func(poolID uuid.UUID) (*dmodels.PoolData, error) {
// 				panic("mock out the GetLastPoolData method")
// 			},
// 			GetLiquidityPoolFunc: func(cond *postgres.Condition) (*dmodels.LiquidityPool, error) {
// 				panic("mock out the GetLiquidityPool method")
// 			},
// 			GetLiquidityPoolsFunc: func(cond *postgres.Condition) ([]*dmodels.LiquidityPool, error) {
// 				panic("mock out the GetLiquidityPools method")
// 			},
// 			GetLiquidityPoolsCountFunc: func(cond *postgres.Condition) (int64, error) {
// 				panic("mock out the GetLiquidityPoolsCount method")
// 			},
// 			GetPoolFunc: func(name string) (*dmodels.Pool, error) {
// 				panic("mock out the GetPool method")
// 			},
// 			GetPoolCountFunc: func(condition *postgres.Condition) (int64, error) {
// 				panic("mock out the GetPoolCount method")
// 			},
// 			GetPoolStatisticFunc: func(poolID uuid.UUID, aggregate postgres.Aggregate) ([]*dmodels.PoolData, error) {
// 				panic("mock out the GetPoolStatistic method")
// 			},
// 			GetPoolValidatorDataFunc: func(condition *postgres.PoolValidatorDataCondition) ([]*dmodels.PoolValidatorData, error) {
// 				panic("mock out the GetPoolValidatorData method")
// 			},
// 			GetPoolsFunc: func(condition *postgres.PoolCondition) ([]*dmodels.Pool, error) {
// 				panic("mock out the GetPools method")
// 			},
// 			GetValidatorFunc: func(validatorID string) (*dmodels.ValidatorView, error) {
// 				panic("mock out the GetValidator method")
// 			},
// 			GetValidatorByVotePKFunc: func(key solana.PublicKey) (*dmodels.ValidatorView, error) {
// 				panic("mock out the GetValidatorByVotePK method")
// 			},
// 			GetValidatorCountFunc: func(condition *postgres.ValidatorCondition) (int64, error) {
// 				panic("mock out the GetValidatorCount method")
// 			},
// 			GetValidatorDataCountFunc: func(condition *postgres.PoolValidatorDataCondition) (int64, error) {
// 				panic("mock out the GetValidatorDataCount method")
// 			},
// 			GetValidatorsFunc: func(condition *postgres.ValidatorCondition) ([]*dmodels.ValidatorView, error) {
// 				panic("mock out the GetValidators method")
// 			},
// 			SaveCoinFunc: func(coin ...*dmodels.Coin) error {
// 				panic("mock out the SaveCoin method")
// 			},
// 			SaveDEFIsFunc: func(defiData ...*dmodels.DEFI) error {
// 				panic("mock out the SaveDEFIs method")
// 			},
// 			SaveGovernanceFunc: func(gov ...*dmodels.Governance) error {
// 				panic("mock out the SaveGovernance method")
// 			},
// 			UpdatePoolDataFunc: func(poolData *dmodels.PoolData) error {
// 				panic("mock out the UpdatePoolData method")
// 			},
// 			UpdateValidatorsFunc: func(validators ...*dmodels.Validator) error {
// 				panic("mock out the UpdateValidators method")
// 			},
// 			UpdateValidatorsDataFunc: func(data ...*dmodels.ValidatorData) error {
// 				panic("mock out the UpdateValidatorsData method")
// 			},
// 		}
//
// 		// use mockedPostgres in code that requires Postgres
// 		// and then make assertions.
//
// 	}
type PostgresMock struct {
	// CreatePoolValidatorDataFunc mocks the CreatePoolValidatorData method.
	CreatePoolValidatorDataFunc func(pools ...*dmodels.PoolValidatorData) error

	// DeleteDeFisFunc mocks the DeleteDeFis method.
	DeleteDeFisFunc func(cond *postgres.DeFiCondition) error

	// DeleteValidatorsFunc mocks the DeleteValidators method.
	DeleteValidatorsFunc func(poolID uuid.UUID) error

	// GetCoinByIDFunc mocks the GetCoinByID method.
	GetCoinByIDFunc func(id uuid.UUID) (*dmodels.Coin, error)

	// GetCoinsFunc mocks the GetCoins method.
	GetCoinsFunc func(cond *postgres.CoinCondition) ([]*dmodels.Coin, error)

	// GetCoinsCountFunc mocks the GetCoinsCount method.
	GetCoinsCountFunc func(cond *postgres.CoinCondition) (int64, error)

	// GetDEFIsFunc mocks the GetDEFIs method.
	GetDEFIsFunc func(cond *postgres.DeFiCondition) ([]*dmodels.DEFI, error)

	// GetGovernanceFunc mocks the GetGovernance method.
	GetGovernanceFunc func(cond *postgres.GovernanceCondition) ([]*dmodels.Governance, error)

	// GetGovernanceCountFunc mocks the GetGovernanceCount method.
	GetGovernanceCountFunc func(cond *postgres.GovernanceCondition) (int64, error)

	// GetLastEpochPoolDataFunc mocks the GetLastEpochPoolData method.
	GetLastEpochPoolDataFunc func(PoolID uuid.UUID, currentEpoch uint64) (*dmodels.PoolData, error)

	// GetLastPoolDataFunc mocks the GetLastPoolData method.
	GetLastPoolDataFunc func(poolID uuid.UUID) (*dmodels.PoolData, error)

	// GetLiquidityPoolFunc mocks the GetLiquidityPool method.
	GetLiquidityPoolFunc func(cond *postgres.Condition) (*dmodels.LiquidityPool, error)

	// GetLiquidityPoolsFunc mocks the GetLiquidityPools method.
	GetLiquidityPoolsFunc func(cond *postgres.Condition) ([]*dmodels.LiquidityPool, error)

	// GetLiquidityPoolsCountFunc mocks the GetLiquidityPoolsCount method.
	GetLiquidityPoolsCountFunc func(cond *postgres.Condition) (int64, error)

	// GetPoolFunc mocks the GetPool method.
	GetPoolFunc func(name string) (*dmodels.Pool, error)

	// GetPoolCountFunc mocks the GetPoolCount method.
	GetPoolCountFunc func(condition *postgres.Condition) (int64, error)

	// GetPoolStatisticFunc mocks the GetPoolStatistic method.
	GetPoolStatisticFunc func(poolID uuid.UUID, aggregate postgres.Aggregate) ([]*dmodels.PoolData, error)

	// GetPoolValidatorDataFunc mocks the GetPoolValidatorData method.
	GetPoolValidatorDataFunc func(condition *postgres.PoolValidatorDataCondition) ([]*dmodels.PoolValidatorData, error)

	// GetPoolsFunc mocks the GetPools method.
	GetPoolsFunc func(condition *postgres.PoolCondition) ([]*dmodels.Pool, error)

	// GetValidatorFunc mocks the GetValidator method.
	GetValidatorFunc func(validatorID string) (*dmodels.ValidatorView, error)

	// GetValidatorByVotePKFunc mocks the GetValidatorByVotePK method.
	GetValidatorByVotePKFunc func(key solana.PublicKey) (*dmodels.ValidatorView, error)

	// GetValidatorCountFunc mocks the GetValidatorCount method.
	GetValidatorCountFunc func(condition *postgres.ValidatorCondition) (int64, error)

	// GetValidatorDataCountFunc mocks the GetValidatorDataCount method.
	GetValidatorDataCountFunc func(condition *postgres.PoolValidatorDataCondition) (int64, error)

	// GetValidatorsFunc mocks the GetValidators method.
	GetValidatorsFunc func(condition *postgres.ValidatorCondition) ([]*dmodels.ValidatorView, error)

	// SaveCoinFunc mocks the SaveCoin method.
	SaveCoinFunc func(coin ...*dmodels.Coin) error

	// SaveDEFIsFunc mocks the SaveDEFIs method.
	SaveDEFIsFunc func(defiData ...*dmodels.DEFI) error

	// SaveGovernanceFunc mocks the SaveGovernance method.
	SaveGovernanceFunc func(gov ...*dmodels.Governance) error

	// UpdatePoolDataFunc mocks the UpdatePoolData method.
	UpdatePoolDataFunc func(poolData *dmodels.PoolData) error

	// UpdateValidatorsFunc mocks the UpdateValidators method.
	UpdateValidatorsFunc func(validators ...*dmodels.Validator) error

	// UpdateValidatorsDataFunc mocks the UpdateValidatorsData method.
	UpdateValidatorsDataFunc func(data ...*dmodels.ValidatorData) error

	// calls tracks calls to the methods.
	calls struct {
		// CreatePoolValidatorData holds details about calls to the CreatePoolValidatorData method.
		CreatePoolValidatorData []struct {
			// Pools is the pools argument value.
			Pools []*dmodels.PoolValidatorData
		}
		// DeleteDeFis holds details about calls to the DeleteDeFis method.
		DeleteDeFis []struct {
			// Cond is the cond argument value.
			Cond *postgres.DeFiCondition
		}
		// DeleteValidators holds details about calls to the DeleteValidators method.
		DeleteValidators []struct {
			// PoolID is the poolID argument value.
			PoolID uuid.UUID
		}
		// GetCoinByID holds details about calls to the GetCoinByID method.
		GetCoinByID []struct {
			// ID is the id argument value.
			ID uuid.UUID
		}
		// GetCoins holds details about calls to the GetCoins method.
		GetCoins []struct {
			// Cond is the cond argument value.
			Cond *postgres.CoinCondition
		}
		// GetCoinsCount holds details about calls to the GetCoinsCount method.
		GetCoinsCount []struct {
			// Cond is the cond argument value.
			Cond *postgres.CoinCondition
		}
		// GetDEFIs holds details about calls to the GetDEFIs method.
		GetDEFIs []struct {
			// Cond is the cond argument value.
			Cond *postgres.DeFiCondition
		}
		// GetGovernance holds details about calls to the GetGovernance method.
		GetGovernance []struct {
			// Cond is the cond argument value.
			Cond *postgres.GovernanceCondition
		}
		// GetGovernanceCount holds details about calls to the GetGovernanceCount method.
		GetGovernanceCount []struct {
			// Cond is the cond argument value.
			Cond *postgres.GovernanceCondition
		}
		// GetLastEpochPoolData holds details about calls to the GetLastEpochPoolData method.
		GetLastEpochPoolData []struct {
			// PoolID is the PoolID argument value.
			PoolID uuid.UUID
			// CurrentEpoch is the currentEpoch argument value.
			CurrentEpoch uint64
		}
		// GetLastPoolData holds details about calls to the GetLastPoolData method.
		GetLastPoolData []struct {
			// PoolID is the poolID argument value.
			PoolID uuid.UUID
		}
		// GetLiquidityPool holds details about calls to the GetLiquidityPool method.
		GetLiquidityPool []struct {
			// Cond is the cond argument value.
			Cond *postgres.Condition
		}
		// GetLiquidityPools holds details about calls to the GetLiquidityPools method.
		GetLiquidityPools []struct {
			// Cond is the cond argument value.
			Cond *postgres.Condition
		}
		// GetLiquidityPoolsCount holds details about calls to the GetLiquidityPoolsCount method.
		GetLiquidityPoolsCount []struct {
			// Cond is the cond argument value.
			Cond *postgres.Condition
		}
		// GetPool holds details about calls to the GetPool method.
		GetPool []struct {
			// Name is the name argument value.
			Name string
		}
		// GetPoolCount holds details about calls to the GetPoolCount method.
		GetPoolCount []struct {
			// Condition is the condition argument value.
			Condition *postgres.Condition
		}
		// GetPoolStatistic holds details about calls to the GetPoolStatistic method.
		GetPoolStatistic []struct {
			// PoolID is the poolID argument value.
			PoolID uuid.UUID
			// Aggregate is the aggregate argument value.
			Aggregate postgres.Aggregate
		}
		// GetPoolValidatorData holds details about calls to the GetPoolValidatorData method.
		GetPoolValidatorData []struct {
			// Condition is the condition argument value.
			Condition *postgres.PoolValidatorDataCondition
		}
		// GetPools holds details about calls to the GetPools method.
		GetPools []struct {
			// Condition is the condition argument value.
			Condition *postgres.PoolCondition
		}
		// GetValidator holds details about calls to the GetValidator method.
		GetValidator []struct {
			// ValidatorID is the validatorID argument value.
			ValidatorID string
		}
		// GetValidatorByVotePK holds details about calls to the GetValidatorByVotePK method.
		GetValidatorByVotePK []struct {
			// Key is the key argument value.
			Key solana.PublicKey
		}
		// GetValidatorCount holds details about calls to the GetValidatorCount method.
		GetValidatorCount []struct {
			// Condition is the condition argument value.
			Condition *postgres.ValidatorCondition
		}
		// GetValidatorDataCount holds details about calls to the GetValidatorDataCount method.
		GetValidatorDataCount []struct {
			// Condition is the condition argument value.
			Condition *postgres.PoolValidatorDataCondition
		}
		// GetValidators holds details about calls to the GetValidators method.
		GetValidators []struct {
			// Condition is the condition argument value.
			Condition *postgres.ValidatorCondition
		}
		// SaveCoin holds details about calls to the SaveCoin method.
		SaveCoin []struct {
			// Coin is the coin argument value.
			Coin []*dmodels.Coin
		}
		// SaveDEFIs holds details about calls to the SaveDEFIs method.
		SaveDEFIs []struct {
			// DefiData is the defiData argument value.
			DefiData []*dmodels.DEFI
		}
		// SaveGovernance holds details about calls to the SaveGovernance method.
		SaveGovernance []struct {
			// Gov is the gov argument value.
			Gov []*dmodels.Governance
		}
		// UpdatePoolData holds details about calls to the UpdatePoolData method.
		UpdatePoolData []struct {
			// PoolData is the poolData argument value.
			PoolData *dmodels.PoolData
		}
		// UpdateValidators holds details about calls to the UpdateValidators method.
		UpdateValidators []struct {
			// Validators is the validators argument value.
			Validators []*dmodels.Validator
		}
		// UpdateValidatorsData holds details about calls to the UpdateValidatorsData method.
		UpdateValidatorsData []struct {
			// Data is the data argument value.
			Data []*dmodels.ValidatorData
		}
	}
	lockCreatePoolValidatorData sync.RWMutex
	lockDeleteDeFis             sync.RWMutex
	lockDeleteValidators        sync.RWMutex
	lockGetCoinByID             sync.RWMutex
	lockGetCoins                sync.RWMutex
	lockGetCoinsCount           sync.RWMutex
	lockGetDEFIs                sync.RWMutex
	lockGetGovernance           sync.RWMutex
	lockGetGovernanceCount      sync.RWMutex
	lockGetLastEpochPoolData    sync.RWMutex
	lockGetLastPoolData         sync.RWMutex
	lockGetLiquidityPool        sync.RWMutex
	lockGetLiquidityPools       sync.RWMutex
	lockGetLiquidityPoolsCount  sync.RWMutex
	lockGetPool                 sync.RWMutex
	lockGetPoolCount            sync.RWMutex
	lockGetPoolStatistic        sync.RWMutex
	lockGetPoolValidatorData    sync.RWMutex
	lockGetPools                sync.RWMutex
	lockGetValidator            sync.RWMutex
	lockGetValidatorByVotePK    sync.RWMutex
	lockGetValidatorCount       sync.RWMutex
	lockGetValidatorDataCount   sync.RWMutex
	lockGetValidators           sync.RWMutex
	lockSaveCoin                sync.RWMutex
	lockSaveDEFIs               sync.RWMutex
	lockSaveGovernance          sync.RWMutex
	lockUpdatePoolData          sync.RWMutex
	lockUpdateValidators        sync.RWMutex
	lockUpdateValidatorsData    sync.RWMutex
}

// CreatePoolValidatorData calls CreatePoolValidatorDataFunc.
func (mock *PostgresMock) CreatePoolValidatorData(pools ...*dmodels.PoolValidatorData) error {
	if mock.CreatePoolValidatorDataFunc == nil {
		panic("PostgresMock.CreatePoolValidatorDataFunc: method is nil but Postgres.CreatePoolValidatorData was just called")
	}
	callInfo := struct {
		Pools []*dmodels.PoolValidatorData
	}{
		Pools: pools,
	}
	mock.lockCreatePoolValidatorData.Lock()
	mock.calls.CreatePoolValidatorData = append(mock.calls.CreatePoolValidatorData, callInfo)
	mock.lockCreatePoolValidatorData.Unlock()
	return mock.CreatePoolValidatorDataFunc(pools...)
}

// CreatePoolValidatorDataCalls gets all the calls that were made to CreatePoolValidatorData.
// Check the length with:
//     len(mockedPostgres.CreatePoolValidatorDataCalls())
func (mock *PostgresMock) CreatePoolValidatorDataCalls() []struct {
	Pools []*dmodels.PoolValidatorData
} {
	var calls []struct {
		Pools []*dmodels.PoolValidatorData
	}
	mock.lockCreatePoolValidatorData.RLock()
	calls = mock.calls.CreatePoolValidatorData
	mock.lockCreatePoolValidatorData.RUnlock()
	return calls
}

// DeleteDeFis calls DeleteDeFisFunc.
func (mock *PostgresMock) DeleteDeFis(cond *postgres.DeFiCondition) error {
	if mock.DeleteDeFisFunc == nil {
		panic("PostgresMock.DeleteDeFisFunc: method is nil but Postgres.DeleteDeFis was just called")
	}
	callInfo := struct {
		Cond *postgres.DeFiCondition
	}{
		Cond: cond,
	}
	mock.lockDeleteDeFis.Lock()
	mock.calls.DeleteDeFis = append(mock.calls.DeleteDeFis, callInfo)
	mock.lockDeleteDeFis.Unlock()
	return mock.DeleteDeFisFunc(cond)
}

// DeleteDeFisCalls gets all the calls that were made to DeleteDeFis.
// Check the length with:
//     len(mockedPostgres.DeleteDeFisCalls())
func (mock *PostgresMock) DeleteDeFisCalls() []struct {
	Cond *postgres.DeFiCondition
} {
	var calls []struct {
		Cond *postgres.DeFiCondition
	}
	mock.lockDeleteDeFis.RLock()
	calls = mock.calls.DeleteDeFis
	mock.lockDeleteDeFis.RUnlock()
	return calls
}

// DeleteValidators calls DeleteValidatorsFunc.
func (mock *PostgresMock) DeleteValidators(poolID uuid.UUID) error {
	if mock.DeleteValidatorsFunc == nil {
		panic("PostgresMock.DeleteValidatorsFunc: method is nil but Postgres.DeleteValidators was just called")
	}
	callInfo := struct {
		PoolID uuid.UUID
	}{
		PoolID: poolID,
	}
	mock.lockDeleteValidators.Lock()
	mock.calls.DeleteValidators = append(mock.calls.DeleteValidators, callInfo)
	mock.lockDeleteValidators.Unlock()
	return mock.DeleteValidatorsFunc(poolID)
}

// DeleteValidatorsCalls gets all the calls that were made to DeleteValidators.
// Check the length with:
//     len(mockedPostgres.DeleteValidatorsCalls())
func (mock *PostgresMock) DeleteValidatorsCalls() []struct {
	PoolID uuid.UUID
} {
	var calls []struct {
		PoolID uuid.UUID
	}
	mock.lockDeleteValidators.RLock()
	calls = mock.calls.DeleteValidators
	mock.lockDeleteValidators.RUnlock()
	return calls
}

// GetCoinByID calls GetCoinByIDFunc.
func (mock *PostgresMock) GetCoinByID(id uuid.UUID) (*dmodels.Coin, error) {
	if mock.GetCoinByIDFunc == nil {
		panic("PostgresMock.GetCoinByIDFunc: method is nil but Postgres.GetCoinByID was just called")
	}
	callInfo := struct {
		ID uuid.UUID
	}{
		ID: id,
	}
	mock.lockGetCoinByID.Lock()
	mock.calls.GetCoinByID = append(mock.calls.GetCoinByID, callInfo)
	mock.lockGetCoinByID.Unlock()
	return mock.GetCoinByIDFunc(id)
}

// GetCoinByIDCalls gets all the calls that were made to GetCoinByID.
// Check the length with:
//     len(mockedPostgres.GetCoinByIDCalls())
func (mock *PostgresMock) GetCoinByIDCalls() []struct {
	ID uuid.UUID
} {
	var calls []struct {
		ID uuid.UUID
	}
	mock.lockGetCoinByID.RLock()
	calls = mock.calls.GetCoinByID
	mock.lockGetCoinByID.RUnlock()
	return calls
}

// GetCoins calls GetCoinsFunc.
func (mock *PostgresMock) GetCoins(cond *postgres.CoinCondition) ([]*dmodels.Coin, error) {
	if mock.GetCoinsFunc == nil {
		panic("PostgresMock.GetCoinsFunc: method is nil but Postgres.GetCoins was just called")
	}
	callInfo := struct {
		Cond *postgres.CoinCondition
	}{
		Cond: cond,
	}
	mock.lockGetCoins.Lock()
	mock.calls.GetCoins = append(mock.calls.GetCoins, callInfo)
	mock.lockGetCoins.Unlock()
	return mock.GetCoinsFunc(cond)
}

// GetCoinsCalls gets all the calls that were made to GetCoins.
// Check the length with:
//     len(mockedPostgres.GetCoinsCalls())
func (mock *PostgresMock) GetCoinsCalls() []struct {
	Cond *postgres.CoinCondition
} {
	var calls []struct {
		Cond *postgres.CoinCondition
	}
	mock.lockGetCoins.RLock()
	calls = mock.calls.GetCoins
	mock.lockGetCoins.RUnlock()
	return calls
}

// GetCoinsCount calls GetCoinsCountFunc.
func (mock *PostgresMock) GetCoinsCount(cond *postgres.CoinCondition) (int64, error) {
	if mock.GetCoinsCountFunc == nil {
		panic("PostgresMock.GetCoinsCountFunc: method is nil but Postgres.GetCoinsCount was just called")
	}
	callInfo := struct {
		Cond *postgres.CoinCondition
	}{
		Cond: cond,
	}
	mock.lockGetCoinsCount.Lock()
	mock.calls.GetCoinsCount = append(mock.calls.GetCoinsCount, callInfo)
	mock.lockGetCoinsCount.Unlock()
	return mock.GetCoinsCountFunc(cond)
}

// GetCoinsCountCalls gets all the calls that were made to GetCoinsCount.
// Check the length with:
//     len(mockedPostgres.GetCoinsCountCalls())
func (mock *PostgresMock) GetCoinsCountCalls() []struct {
	Cond *postgres.CoinCondition
} {
	var calls []struct {
		Cond *postgres.CoinCondition
	}
	mock.lockGetCoinsCount.RLock()
	calls = mock.calls.GetCoinsCount
	mock.lockGetCoinsCount.RUnlock()
	return calls
}

// GetDEFIs calls GetDEFIsFunc.
func (mock *PostgresMock) GetDEFIs(cond *postgres.DeFiCondition) ([]*dmodels.DEFI, error) {
	if mock.GetDEFIsFunc == nil {
		panic("PostgresMock.GetDEFIsFunc: method is nil but Postgres.GetDEFIs was just called")
	}
	callInfo := struct {
		Cond *postgres.DeFiCondition
	}{
		Cond: cond,
	}
	mock.lockGetDEFIs.Lock()
	mock.calls.GetDEFIs = append(mock.calls.GetDEFIs, callInfo)
	mock.lockGetDEFIs.Unlock()
	return mock.GetDEFIsFunc(cond)
}

// GetDEFIsCalls gets all the calls that were made to GetDEFIs.
// Check the length with:
//     len(mockedPostgres.GetDEFIsCalls())
func (mock *PostgresMock) GetDEFIsCalls() []struct {
	Cond *postgres.DeFiCondition
} {
	var calls []struct {
		Cond *postgres.DeFiCondition
	}
	mock.lockGetDEFIs.RLock()
	calls = mock.calls.GetDEFIs
	mock.lockGetDEFIs.RUnlock()
	return calls
}

// GetGovernance calls GetGovernanceFunc.
func (mock *PostgresMock) GetGovernance(cond *postgres.GovernanceCondition) ([]*dmodels.Governance, error) {
	if mock.GetGovernanceFunc == nil {
		panic("PostgresMock.GetGovernanceFunc: method is nil but Postgres.GetGovernance was just called")
	}
	callInfo := struct {
		Cond *postgres.GovernanceCondition
	}{
		Cond: cond,
	}
	mock.lockGetGovernance.Lock()
	mock.calls.GetGovernance = append(mock.calls.GetGovernance, callInfo)
	mock.lockGetGovernance.Unlock()
	return mock.GetGovernanceFunc(cond)
}

// GetGovernanceCalls gets all the calls that were made to GetGovernance.
// Check the length with:
//     len(mockedPostgres.GetGovernanceCalls())
func (mock *PostgresMock) GetGovernanceCalls() []struct {
	Cond *postgres.GovernanceCondition
} {
	var calls []struct {
		Cond *postgres.GovernanceCondition
	}
	mock.lockGetGovernance.RLock()
	calls = mock.calls.GetGovernance
	mock.lockGetGovernance.RUnlock()
	return calls
}

// GetGovernanceCount calls GetGovernanceCountFunc.
func (mock *PostgresMock) GetGovernanceCount(cond *postgres.GovernanceCondition) (int64, error) {
	if mock.GetGovernanceCountFunc == nil {
		panic("PostgresMock.GetGovernanceCountFunc: method is nil but Postgres.GetGovernanceCount was just called")
	}
	callInfo := struct {
		Cond *postgres.GovernanceCondition
	}{
		Cond: cond,
	}
	mock.lockGetGovernanceCount.Lock()
	mock.calls.GetGovernanceCount = append(mock.calls.GetGovernanceCount, callInfo)
	mock.lockGetGovernanceCount.Unlock()
	return mock.GetGovernanceCountFunc(cond)
}

// GetGovernanceCountCalls gets all the calls that were made to GetGovernanceCount.
// Check the length with:
//     len(mockedPostgres.GetGovernanceCountCalls())
func (mock *PostgresMock) GetGovernanceCountCalls() []struct {
	Cond *postgres.GovernanceCondition
} {
	var calls []struct {
		Cond *postgres.GovernanceCondition
	}
	mock.lockGetGovernanceCount.RLock()
	calls = mock.calls.GetGovernanceCount
	mock.lockGetGovernanceCount.RUnlock()
	return calls
}

// GetLastEpochPoolData calls GetLastEpochPoolDataFunc.
func (mock *PostgresMock) GetLastEpochPoolData(PoolID uuid.UUID, currentEpoch uint64) (*dmodels.PoolData, error) {
	if mock.GetLastEpochPoolDataFunc == nil {
		panic("PostgresMock.GetLastEpochPoolDataFunc: method is nil but Postgres.GetLastEpochPoolData was just called")
	}
	callInfo := struct {
		PoolID       uuid.UUID
		CurrentEpoch uint64
	}{
		PoolID:       PoolID,
		CurrentEpoch: currentEpoch,
	}
	mock.lockGetLastEpochPoolData.Lock()
	mock.calls.GetLastEpochPoolData = append(mock.calls.GetLastEpochPoolData, callInfo)
	mock.lockGetLastEpochPoolData.Unlock()
	return mock.GetLastEpochPoolDataFunc(PoolID, currentEpoch)
}

// GetLastEpochPoolDataCalls gets all the calls that were made to GetLastEpochPoolData.
// Check the length with:
//     len(mockedPostgres.GetLastEpochPoolDataCalls())
func (mock *PostgresMock) GetLastEpochPoolDataCalls() []struct {
	PoolID       uuid.UUID
	CurrentEpoch uint64
} {
	var calls []struct {
		PoolID       uuid.UUID
		CurrentEpoch uint64
	}
	mock.lockGetLastEpochPoolData.RLock()
	calls = mock.calls.GetLastEpochPoolData
	mock.lockGetLastEpochPoolData.RUnlock()
	return calls
}

// GetLastPoolData calls GetLastPoolDataFunc.
func (mock *PostgresMock) GetLastPoolData(poolID uuid.UUID) (*dmodels.PoolData, error) {
	if mock.GetLastPoolDataFunc == nil {
		panic("PostgresMock.GetLastPoolDataFunc: method is nil but Postgres.GetLastPoolData was just called")
	}
	callInfo := struct {
		PoolID uuid.UUID
	}{
		PoolID: poolID,
	}
	mock.lockGetLastPoolData.Lock()
	mock.calls.GetLastPoolData = append(mock.calls.GetLastPoolData, callInfo)
	mock.lockGetLastPoolData.Unlock()
	return mock.GetLastPoolDataFunc(poolID)
}

// GetLastPoolDataCalls gets all the calls that were made to GetLastPoolData.
// Check the length with:
//     len(mockedPostgres.GetLastPoolDataCalls())
func (mock *PostgresMock) GetLastPoolDataCalls() []struct {
	PoolID uuid.UUID
} {
	var calls []struct {
		PoolID uuid.UUID
	}
	mock.lockGetLastPoolData.RLock()
	calls = mock.calls.GetLastPoolData
	mock.lockGetLastPoolData.RUnlock()
	return calls
}

// GetLiquidityPool calls GetLiquidityPoolFunc.
func (mock *PostgresMock) GetLiquidityPool(cond *postgres.Condition) (*dmodels.LiquidityPool, error) {
	if mock.GetLiquidityPoolFunc == nil {
		panic("PostgresMock.GetLiquidityPoolFunc: method is nil but Postgres.GetLiquidityPool was just called")
	}
	callInfo := struct {
		Cond *postgres.Condition
	}{
		Cond: cond,
	}
	mock.lockGetLiquidityPool.Lock()
	mock.calls.GetLiquidityPool = append(mock.calls.GetLiquidityPool, callInfo)
	mock.lockGetLiquidityPool.Unlock()
	return mock.GetLiquidityPoolFunc(cond)
}

// GetLiquidityPoolCalls gets all the calls that were made to GetLiquidityPool.
// Check the length with:
//     len(mockedPostgres.GetLiquidityPoolCalls())
func (mock *PostgresMock) GetLiquidityPoolCalls() []struct {
	Cond *postgres.Condition
} {
	var calls []struct {
		Cond *postgres.Condition
	}
	mock.lockGetLiquidityPool.RLock()
	calls = mock.calls.GetLiquidityPool
	mock.lockGetLiquidityPool.RUnlock()
	return calls
}

// GetLiquidityPools calls GetLiquidityPoolsFunc.
func (mock *PostgresMock) GetLiquidityPools(cond *postgres.Condition) ([]*dmodels.LiquidityPool, error) {
	if mock.GetLiquidityPoolsFunc == nil {
		panic("PostgresMock.GetLiquidityPoolsFunc: method is nil but Postgres.GetLiquidityPools was just called")
	}
	callInfo := struct {
		Cond *postgres.Condition
	}{
		Cond: cond,
	}
	mock.lockGetLiquidityPools.Lock()
	mock.calls.GetLiquidityPools = append(mock.calls.GetLiquidityPools, callInfo)
	mock.lockGetLiquidityPools.Unlock()
	return mock.GetLiquidityPoolsFunc(cond)
}

// GetLiquidityPoolsCalls gets all the calls that were made to GetLiquidityPools.
// Check the length with:
//     len(mockedPostgres.GetLiquidityPoolsCalls())
func (mock *PostgresMock) GetLiquidityPoolsCalls() []struct {
	Cond *postgres.Condition
} {
	var calls []struct {
		Cond *postgres.Condition
	}
	mock.lockGetLiquidityPools.RLock()
	calls = mock.calls.GetLiquidityPools
	mock.lockGetLiquidityPools.RUnlock()
	return calls
}

// GetLiquidityPoolsCount calls GetLiquidityPoolsCountFunc.
func (mock *PostgresMock) GetLiquidityPoolsCount(cond *postgres.Condition) (int64, error) {
	if mock.GetLiquidityPoolsCountFunc == nil {
		panic("PostgresMock.GetLiquidityPoolsCountFunc: method is nil but Postgres.GetLiquidityPoolsCount was just called")
	}
	callInfo := struct {
		Cond *postgres.Condition
	}{
		Cond: cond,
	}
	mock.lockGetLiquidityPoolsCount.Lock()
	mock.calls.GetLiquidityPoolsCount = append(mock.calls.GetLiquidityPoolsCount, callInfo)
	mock.lockGetLiquidityPoolsCount.Unlock()
	return mock.GetLiquidityPoolsCountFunc(cond)
}

// GetLiquidityPoolsCountCalls gets all the calls that were made to GetLiquidityPoolsCount.
// Check the length with:
//     len(mockedPostgres.GetLiquidityPoolsCountCalls())
func (mock *PostgresMock) GetLiquidityPoolsCountCalls() []struct {
	Cond *postgres.Condition
} {
	var calls []struct {
		Cond *postgres.Condition
	}
	mock.lockGetLiquidityPoolsCount.RLock()
	calls = mock.calls.GetLiquidityPoolsCount
	mock.lockGetLiquidityPoolsCount.RUnlock()
	return calls
}

// GetPool calls GetPoolFunc.
func (mock *PostgresMock) GetPool(name string) (*dmodels.Pool, error) {
	if mock.GetPoolFunc == nil {
		panic("PostgresMock.GetPoolFunc: method is nil but Postgres.GetPool was just called")
	}
	callInfo := struct {
		Name string
	}{
		Name: name,
	}
	mock.lockGetPool.Lock()
	mock.calls.GetPool = append(mock.calls.GetPool, callInfo)
	mock.lockGetPool.Unlock()
	return mock.GetPoolFunc(name)
}

// GetPoolCalls gets all the calls that were made to GetPool.
// Check the length with:
//     len(mockedPostgres.GetPoolCalls())
func (mock *PostgresMock) GetPoolCalls() []struct {
	Name string
} {
	var calls []struct {
		Name string
	}
	mock.lockGetPool.RLock()
	calls = mock.calls.GetPool
	mock.lockGetPool.RUnlock()
	return calls
}

// GetPoolCount calls GetPoolCountFunc.
func (mock *PostgresMock) GetPoolCount(condition *postgres.Condition) (int64, error) {
	if mock.GetPoolCountFunc == nil {
		panic("PostgresMock.GetPoolCountFunc: method is nil but Postgres.GetPoolCount was just called")
	}
	callInfo := struct {
		Condition *postgres.Condition
	}{
		Condition: condition,
	}
	mock.lockGetPoolCount.Lock()
	mock.calls.GetPoolCount = append(mock.calls.GetPoolCount, callInfo)
	mock.lockGetPoolCount.Unlock()
	return mock.GetPoolCountFunc(condition)
}

// GetPoolCountCalls gets all the calls that were made to GetPoolCount.
// Check the length with:
//     len(mockedPostgres.GetPoolCountCalls())
func (mock *PostgresMock) GetPoolCountCalls() []struct {
	Condition *postgres.Condition
} {
	var calls []struct {
		Condition *postgres.Condition
	}
	mock.lockGetPoolCount.RLock()
	calls = mock.calls.GetPoolCount
	mock.lockGetPoolCount.RUnlock()
	return calls
}

// GetPoolStatistic calls GetPoolStatisticFunc.
func (mock *PostgresMock) GetPoolStatistic(poolID uuid.UUID, aggregate postgres.Aggregate) ([]*dmodels.PoolData, error) {
	if mock.GetPoolStatisticFunc == nil {
		panic("PostgresMock.GetPoolStatisticFunc: method is nil but Postgres.GetPoolStatistic was just called")
	}
	callInfo := struct {
		PoolID    uuid.UUID
		Aggregate postgres.Aggregate
	}{
		PoolID:    poolID,
		Aggregate: aggregate,
	}
	mock.lockGetPoolStatistic.Lock()
	mock.calls.GetPoolStatistic = append(mock.calls.GetPoolStatistic, callInfo)
	mock.lockGetPoolStatistic.Unlock()
	return mock.GetPoolStatisticFunc(poolID, aggregate)
}

// GetPoolStatisticCalls gets all the calls that were made to GetPoolStatistic.
// Check the length with:
//     len(mockedPostgres.GetPoolStatisticCalls())
func (mock *PostgresMock) GetPoolStatisticCalls() []struct {
	PoolID    uuid.UUID
	Aggregate postgres.Aggregate
} {
	var calls []struct {
		PoolID    uuid.UUID
		Aggregate postgres.Aggregate
	}
	mock.lockGetPoolStatistic.RLock()
	calls = mock.calls.GetPoolStatistic
	mock.lockGetPoolStatistic.RUnlock()
	return calls
}

// GetPoolValidatorData calls GetPoolValidatorDataFunc.
func (mock *PostgresMock) GetPoolValidatorData(condition *postgres.PoolValidatorDataCondition) ([]*dmodels.PoolValidatorData, error) {
	if mock.GetPoolValidatorDataFunc == nil {
		panic("PostgresMock.GetPoolValidatorDataFunc: method is nil but Postgres.GetPoolValidatorData was just called")
	}
	callInfo := struct {
		Condition *postgres.PoolValidatorDataCondition
	}{
		Condition: condition,
	}
	mock.lockGetPoolValidatorData.Lock()
	mock.calls.GetPoolValidatorData = append(mock.calls.GetPoolValidatorData, callInfo)
	mock.lockGetPoolValidatorData.Unlock()
	return mock.GetPoolValidatorDataFunc(condition)
}

// GetPoolValidatorDataCalls gets all the calls that were made to GetPoolValidatorData.
// Check the length with:
//     len(mockedPostgres.GetPoolValidatorDataCalls())
func (mock *PostgresMock) GetPoolValidatorDataCalls() []struct {
	Condition *postgres.PoolValidatorDataCondition
} {
	var calls []struct {
		Condition *postgres.PoolValidatorDataCondition
	}
	mock.lockGetPoolValidatorData.RLock()
	calls = mock.calls.GetPoolValidatorData
	mock.lockGetPoolValidatorData.RUnlock()
	return calls
}

// GetPools calls GetPoolsFunc.
func (mock *PostgresMock) GetPools(condition *postgres.PoolCondition) ([]*dmodels.Pool, error) {
	if mock.GetPoolsFunc == nil {
		panic("PostgresMock.GetPoolsFunc: method is nil but Postgres.GetPools was just called")
	}
	callInfo := struct {
		Condition *postgres.PoolCondition
	}{
		Condition: condition,
	}
	mock.lockGetPools.Lock()
	mock.calls.GetPools = append(mock.calls.GetPools, callInfo)
	mock.lockGetPools.Unlock()
	return mock.GetPoolsFunc(condition)
}

// GetPoolsCalls gets all the calls that were made to GetPools.
// Check the length with:
//     len(mockedPostgres.GetPoolsCalls())
func (mock *PostgresMock) GetPoolsCalls() []struct {
	Condition *postgres.PoolCondition
} {
	var calls []struct {
		Condition *postgres.PoolCondition
	}
	mock.lockGetPools.RLock()
	calls = mock.calls.GetPools
	mock.lockGetPools.RUnlock()
	return calls
}

// GetValidator calls GetValidatorFunc.
func (mock *PostgresMock) GetValidator(validatorID string) (*dmodels.ValidatorView, error) {
	if mock.GetValidatorFunc == nil {
		panic("PostgresMock.GetValidatorFunc: method is nil but Postgres.GetValidator was just called")
	}
	callInfo := struct {
		ValidatorID string
	}{
		ValidatorID: validatorID,
	}
	mock.lockGetValidator.Lock()
	mock.calls.GetValidator = append(mock.calls.GetValidator, callInfo)
	mock.lockGetValidator.Unlock()
	return mock.GetValidatorFunc(validatorID)
}

// GetValidatorCalls gets all the calls that were made to GetValidator.
// Check the length with:
//     len(mockedPostgres.GetValidatorCalls())
func (mock *PostgresMock) GetValidatorCalls() []struct {
	ValidatorID string
} {
	var calls []struct {
		ValidatorID string
	}
	mock.lockGetValidator.RLock()
	calls = mock.calls.GetValidator
	mock.lockGetValidator.RUnlock()
	return calls
}

// GetValidatorByVotePK calls GetValidatorByVotePKFunc.
func (mock *PostgresMock) GetValidatorByVotePK(key solana.PublicKey) (*dmodels.ValidatorView, error) {
	if mock.GetValidatorByVotePKFunc == nil {
		panic("PostgresMock.GetValidatorByVotePKFunc: method is nil but Postgres.GetValidatorByVotePK was just called")
	}
	callInfo := struct {
		Key solana.PublicKey
	}{
		Key: key,
	}
	mock.lockGetValidatorByVotePK.Lock()
	mock.calls.GetValidatorByVotePK = append(mock.calls.GetValidatorByVotePK, callInfo)
	mock.lockGetValidatorByVotePK.Unlock()
	return mock.GetValidatorByVotePKFunc(key)
}

// GetValidatorByVotePKCalls gets all the calls that were made to GetValidatorByVotePK.
// Check the length with:
//     len(mockedPostgres.GetValidatorByVotePKCalls())
func (mock *PostgresMock) GetValidatorByVotePKCalls() []struct {
	Key solana.PublicKey
} {
	var calls []struct {
		Key solana.PublicKey
	}
	mock.lockGetValidatorByVotePK.RLock()
	calls = mock.calls.GetValidatorByVotePK
	mock.lockGetValidatorByVotePK.RUnlock()
	return calls
}

// GetValidatorCount calls GetValidatorCountFunc.
func (mock *PostgresMock) GetValidatorCount(condition *postgres.ValidatorCondition) (int64, error) {
	if mock.GetValidatorCountFunc == nil {
		panic("PostgresMock.GetValidatorCountFunc: method is nil but Postgres.GetValidatorCount was just called")
	}
	callInfo := struct {
		Condition *postgres.ValidatorCondition
	}{
		Condition: condition,
	}
	mock.lockGetValidatorCount.Lock()
	mock.calls.GetValidatorCount = append(mock.calls.GetValidatorCount, callInfo)
	mock.lockGetValidatorCount.Unlock()
	return mock.GetValidatorCountFunc(condition)
}

// GetValidatorCountCalls gets all the calls that were made to GetValidatorCount.
// Check the length with:
//     len(mockedPostgres.GetValidatorCountCalls())
func (mock *PostgresMock) GetValidatorCountCalls() []struct {
	Condition *postgres.ValidatorCondition
} {
	var calls []struct {
		Condition *postgres.ValidatorCondition
	}
	mock.lockGetValidatorCount.RLock()
	calls = mock.calls.GetValidatorCount
	mock.lockGetValidatorCount.RUnlock()
	return calls
}

// GetValidatorDataCount calls GetValidatorDataCountFunc.
func (mock *PostgresMock) GetValidatorDataCount(condition *postgres.PoolValidatorDataCondition) (int64, error) {
	if mock.GetValidatorDataCountFunc == nil {
		panic("PostgresMock.GetValidatorDataCountFunc: method is nil but Postgres.GetValidatorDataCount was just called")
	}
	callInfo := struct {
		Condition *postgres.PoolValidatorDataCondition
	}{
		Condition: condition,
	}
	mock.lockGetValidatorDataCount.Lock()
	mock.calls.GetValidatorDataCount = append(mock.calls.GetValidatorDataCount, callInfo)
	mock.lockGetValidatorDataCount.Unlock()
	return mock.GetValidatorDataCountFunc(condition)
}

// GetValidatorDataCountCalls gets all the calls that were made to GetValidatorDataCount.
// Check the length with:
//     len(mockedPostgres.GetValidatorDataCountCalls())
func (mock *PostgresMock) GetValidatorDataCountCalls() []struct {
	Condition *postgres.PoolValidatorDataCondition
} {
	var calls []struct {
		Condition *postgres.PoolValidatorDataCondition
	}
	mock.lockGetValidatorDataCount.RLock()
	calls = mock.calls.GetValidatorDataCount
	mock.lockGetValidatorDataCount.RUnlock()
	return calls
}

// GetValidators calls GetValidatorsFunc.
func (mock *PostgresMock) GetValidators(condition *postgres.ValidatorCondition) ([]*dmodels.ValidatorView, error) {
	if mock.GetValidatorsFunc == nil {
		panic("PostgresMock.GetValidatorsFunc: method is nil but Postgres.GetValidators was just called")
	}
	callInfo := struct {
		Condition *postgres.ValidatorCondition
	}{
		Condition: condition,
	}
	mock.lockGetValidators.Lock()
	mock.calls.GetValidators = append(mock.calls.GetValidators, callInfo)
	mock.lockGetValidators.Unlock()
	return mock.GetValidatorsFunc(condition)
}

// GetValidatorsCalls gets all the calls that were made to GetValidators.
// Check the length with:
//     len(mockedPostgres.GetValidatorsCalls())
func (mock *PostgresMock) GetValidatorsCalls() []struct {
	Condition *postgres.ValidatorCondition
} {
	var calls []struct {
		Condition *postgres.ValidatorCondition
	}
	mock.lockGetValidators.RLock()
	calls = mock.calls.GetValidators
	mock.lockGetValidators.RUnlock()
	return calls
}

// SaveCoin calls SaveCoinFunc.
func (mock *PostgresMock) SaveCoin(coin ...*dmodels.Coin) error {
	if mock.SaveCoinFunc == nil {
		panic("PostgresMock.SaveCoinFunc: method is nil but Postgres.SaveCoin was just called")
	}
	callInfo := struct {
		Coin []*dmodels.Coin
	}{
		Coin: coin,
	}
	mock.lockSaveCoin.Lock()
	mock.calls.SaveCoin = append(mock.calls.SaveCoin, callInfo)
	mock.lockSaveCoin.Unlock()
	return mock.SaveCoinFunc(coin...)
}

// SaveCoinCalls gets all the calls that were made to SaveCoin.
// Check the length with:
//     len(mockedPostgres.SaveCoinCalls())
func (mock *PostgresMock) SaveCoinCalls() []struct {
	Coin []*dmodels.Coin
} {
	var calls []struct {
		Coin []*dmodels.Coin
	}
	mock.lockSaveCoin.RLock()
	calls = mock.calls.SaveCoin
	mock.lockSaveCoin.RUnlock()
	return calls
}

// SaveDEFIs calls SaveDEFIsFunc.
func (mock *PostgresMock) SaveDEFIs(defiData ...*dmodels.DEFI) error {
	if mock.SaveDEFIsFunc == nil {
		panic("PostgresMock.SaveDEFIsFunc: method is nil but Postgres.SaveDEFIs was just called")
	}
	callInfo := struct {
		DefiData []*dmodels.DEFI
	}{
		DefiData: defiData,
	}
	mock.lockSaveDEFIs.Lock()
	mock.calls.SaveDEFIs = append(mock.calls.SaveDEFIs, callInfo)
	mock.lockSaveDEFIs.Unlock()
	return mock.SaveDEFIsFunc(defiData...)
}

// SaveDEFIsCalls gets all the calls that were made to SaveDEFIs.
// Check the length with:
//     len(mockedPostgres.SaveDEFIsCalls())
func (mock *PostgresMock) SaveDEFIsCalls() []struct {
	DefiData []*dmodels.DEFI
} {
	var calls []struct {
		DefiData []*dmodels.DEFI
	}
	mock.lockSaveDEFIs.RLock()
	calls = mock.calls.SaveDEFIs
	mock.lockSaveDEFIs.RUnlock()
	return calls
}

// SaveGovernance calls SaveGovernanceFunc.
func (mock *PostgresMock) SaveGovernance(gov ...*dmodels.Governance) error {
	if mock.SaveGovernanceFunc == nil {
		panic("PostgresMock.SaveGovernanceFunc: method is nil but Postgres.SaveGovernance was just called")
	}
	callInfo := struct {
		Gov []*dmodels.Governance
	}{
		Gov: gov,
	}
	mock.lockSaveGovernance.Lock()
	mock.calls.SaveGovernance = append(mock.calls.SaveGovernance, callInfo)
	mock.lockSaveGovernance.Unlock()
	return mock.SaveGovernanceFunc(gov...)
}

// SaveGovernanceCalls gets all the calls that were made to SaveGovernance.
// Check the length with:
//     len(mockedPostgres.SaveGovernanceCalls())
func (mock *PostgresMock) SaveGovernanceCalls() []struct {
	Gov []*dmodels.Governance
} {
	var calls []struct {
		Gov []*dmodels.Governance
	}
	mock.lockSaveGovernance.RLock()
	calls = mock.calls.SaveGovernance
	mock.lockSaveGovernance.RUnlock()
	return calls
}

// UpdatePoolData calls UpdatePoolDataFunc.
func (mock *PostgresMock) UpdatePoolData(poolData *dmodels.PoolData) error {
	if mock.UpdatePoolDataFunc == nil {
		panic("PostgresMock.UpdatePoolDataFunc: method is nil but Postgres.UpdatePoolData was just called")
	}
	callInfo := struct {
		PoolData *dmodels.PoolData
	}{
		PoolData: poolData,
	}
	mock.lockUpdatePoolData.Lock()
	mock.calls.UpdatePoolData = append(mock.calls.UpdatePoolData, callInfo)
	mock.lockUpdatePoolData.Unlock()
	return mock.UpdatePoolDataFunc(poolData)
}

// UpdatePoolDataCalls gets all the calls that were made to UpdatePoolData.
// Check the length with:
//     len(mockedPostgres.UpdatePoolDataCalls())
func (mock *PostgresMock) UpdatePoolDataCalls() []struct {
	PoolData *dmodels.PoolData
} {
	var calls []struct {
		PoolData *dmodels.PoolData
	}
	mock.lockUpdatePoolData.RLock()
	calls = mock.calls.UpdatePoolData
	mock.lockUpdatePoolData.RUnlock()
	return calls
}

// UpdateValidators calls UpdateValidatorsFunc.
func (mock *PostgresMock) UpdateValidators(validators ...*dmodels.Validator) error {
	if mock.UpdateValidatorsFunc == nil {
		panic("PostgresMock.UpdateValidatorsFunc: method is nil but Postgres.UpdateValidators was just called")
	}
	callInfo := struct {
		Validators []*dmodels.Validator
	}{
		Validators: validators,
	}
	mock.lockUpdateValidators.Lock()
	mock.calls.UpdateValidators = append(mock.calls.UpdateValidators, callInfo)
	mock.lockUpdateValidators.Unlock()
	return mock.UpdateValidatorsFunc(validators...)
}

// UpdateValidatorsCalls gets all the calls that were made to UpdateValidators.
// Check the length with:
//     len(mockedPostgres.UpdateValidatorsCalls())
func (mock *PostgresMock) UpdateValidatorsCalls() []struct {
	Validators []*dmodels.Validator
} {
	var calls []struct {
		Validators []*dmodels.Validator
	}
	mock.lockUpdateValidators.RLock()
	calls = mock.calls.UpdateValidators
	mock.lockUpdateValidators.RUnlock()
	return calls
}

// UpdateValidatorsData calls UpdateValidatorsDataFunc.
func (mock *PostgresMock) UpdateValidatorsData(data ...*dmodels.ValidatorData) error {
	if mock.UpdateValidatorsDataFunc == nil {
		panic("PostgresMock.UpdateValidatorsDataFunc: method is nil but Postgres.UpdateValidatorsData was just called")
	}
	callInfo := struct {
		Data []*dmodels.ValidatorData
	}{
		Data: data,
	}
	mock.lockUpdateValidatorsData.Lock()
	mock.calls.UpdateValidatorsData = append(mock.calls.UpdateValidatorsData, callInfo)
	mock.lockUpdateValidatorsData.Unlock()
	return mock.UpdateValidatorsDataFunc(data...)
}

// UpdateValidatorsDataCalls gets all the calls that were made to UpdateValidatorsData.
// Check the length with:
//     len(mockedPostgres.UpdateValidatorsDataCalls())
func (mock *PostgresMock) UpdateValidatorsDataCalls() []struct {
	Data []*dmodels.ValidatorData
} {
	var calls []struct {
		Data []*dmodels.ValidatorData
	}
	mock.lockUpdateValidatorsData.RLock()
	calls = mock.calls.UpdateValidatorsData
	mock.lockUpdateValidatorsData.RUnlock()
	return calls
}
