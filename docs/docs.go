// Package docs GENERATED BY THE COMMAND ABOVE; DO NOT EDIT
// This file was generated by swaggo/swag
package docs

import (
	"bytes"
	"encoding/json"
	"strings"
	"text/template"

	"github.com/swaggo/swag"
)

var doc = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {
            "name": "API Support",
            "url": "http://www.swagger.io/support",
            "email": "support@swagger.io"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/coins": {
            "get": {
                "description": "The information on tokens with the specified search parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coin"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "coin name",
                        "name": "name",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.coin"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/epoch": {
            "get": {
                "description": "The current epoch value is returned.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "epoch"
                ],
                "summary": "RestAPI",
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/v1.epoch"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/governance": {
            "get": {
                "description": "get governance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "governance"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "governance name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "price",
                            "name"
                        ],
                        "type": "string",
                        "default": "price",
                        "description": "sort param",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "desc",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.governance"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/liquidity-pools": {
            "get": {
                "description": "This Liquidity Pools list with search by name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the pool without strict observance of the case.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.liquidityPool"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pool-coins": {
            "get": {
                "description": "The information about pool tokens with the specified search parameters.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "coin"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "coin name",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "price",
                            "name"
                        ],
                        "type": "string",
                        "default": "price",
                        "description": "sort param",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "desc",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.coin"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pool-statistic": {
            "get": {
                "description": "The pool statistic for the specified aggregation.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Eversol",
                        "description": "Name of the pool with strict observance of the case.",
                        "name": "name",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "week",
                            "month",
                            "quarter",
                            "half-year",
                            "year"
                        ],
                        "type": "string",
                        "description": "Type of data aggregation for a time period",
                        "name": "aggregation",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.poolStatistic"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pool-validators/{pname}": {
            "get": {
                "description": "This list with pool's validators.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validatorData"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Eversol",
                        "description": "Name of the pool with strict observance of the case.",
                        "name": "pname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "The name of the validatorData without strict observance of the case.",
                        "name": "vname",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            10
                        ],
                        "type": "number",
                        "default": 10,
                        "description": "Epoch aggregation.",
                        "name": "epoch",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "apy",
                            "pool stake",
                            "stake",
                            "fee",
                            "score",
                            "skipped slot",
                            "data center"
                        ],
                        "type": "string",
                        "default": "apy",
                        "description": "sort param",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "desc",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.validatorData"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pool/{name}": {
            "get": {
                "description": "Creates a WS request to get server data for the pool with the pool name specified in the request.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool"
                ],
                "summary": "WebSocket",
                "parameters": [
                    {
                        "type": "string",
                        "default": "Eversol",
                        "description": "Name of the pool with strict observance of the case.",
                        "name": "name",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            1,
                            10
                        ],
                        "type": "number",
                        "default": 10,
                        "description": "Epoch aggregation.",
                        "name": "epoch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/v1.pool"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pools": {
            "get": {
                "description": "This Pools list with ability to sort \u0026 search by name.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the pool without strict observance of the case.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            10
                        ],
                        "type": "number",
                        "default": 10,
                        "description": "Epoch aggregation.",
                        "name": "epoch",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "apy",
                            "pool stake",
                            "validators",
                            "score",
                            "skipped slot",
                            "token price"
                        ],
                        "type": "string",
                        "default": "apy",
                        "description": "The parameter by the value of which the pools will be sorted.",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "Sort in descending order",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.poolMainPage"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/pools-statistic": {
            "get": {
                "description": "Creates a WS request to get current statistics.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "pool"
                ],
                "summary": "WebSocket",
                "parameters": [
                    {
                        "enum": [
                            1,
                            10
                        ],
                        "type": "number",
                        "default": 10,
                        "description": "Epoch aggregation.",
                        "name": "epoch",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/v1.TotalPoolsStatistic"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        },
        "/validators": {
            "get": {
                "description": "This list with all Solana's validators.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "validatorData"
                ],
                "summary": "RestAPI",
                "parameters": [
                    {
                        "type": "string",
                        "description": "The name of the validatorData without strict observance of the case.",
                        "name": "name",
                        "in": "query"
                    },
                    {
                        "enum": [
                            1,
                            10
                        ],
                        "type": "number",
                        "default": 10,
                        "description": "Epoch aggregation.",
                        "name": "epoch",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "number"
                        },
                        "collectionFormat": "multi",
                        "description": "Epochs for filter.",
                        "name": "epochs",
                        "in": "query"
                    },
                    {
                        "enum": [
                            "apy",
                            "stake",
                            "fee",
                            "score",
                            "skipped slot",
                            "data center",
                            "staking account"
                        ],
                        "type": "string",
                        "default": "apy",
                        "description": "sort param",
                        "name": "sort",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "default": true,
                        "description": "desc",
                        "name": "desc",
                        "in": "query"
                    },
                    {
                        "type": "number",
                        "default": 0,
                        "description": "offset for aggregation",
                        "name": "offset",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "number",
                        "default": 10,
                        "description": "limit for aggregation",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Ok",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/tools.ResponseArrayData"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/v1.validator"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "404": {
                        "description": "bad request",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "500": {
                        "description": "internal server error",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    },
                    "default": {
                        "description": "default response",
                        "schema": {
                            "$ref": "#/definitions/tools.ResponseError"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "tools.MetaData": {
            "type": "object",
            "properties": {
                "limit": {
                    "type": "integer"
                },
                "offset": {
                    "type": "integer"
                },
                "total_amount": {
                    "type": "integer"
                }
            }
        },
        "tools.ResponseArrayData": {
            "type": "object",
            "properties": {
                "data": {},
                "meta_data": {
                    "$ref": "#/definitions/tools.MetaData"
                }
            }
        },
        "tools.ResponseData": {
            "type": "object",
            "properties": {
                "data": {}
            }
        },
        "tools.ResponseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "v1.TotalPoolsStatistic": {
            "type": "object",
            "properties": {
                "avg_performance_score": {
                    "type": "integer"
                },
                "max_performance_score": {
                    "type": "integer"
                },
                "min_performance_score": {
                    "type": "integer"
                },
                "network_apy": {
                    "type": "number"
                },
                "pools": {
                    "type": "integer"
                },
                "pools_max_apy": {
                    "type": "number"
                },
                "skipped_slot": {
                    "type": "number"
                },
                "total_active_stake": {
                    "type": "number"
                },
                "total_active_stake_pool": {
                    "type": "number"
                },
                "total_supply": {
                    "type": "number"
                },
                "total_unstake_liquidity": {
                    "type": "number"
                },
                "total_validators": {
                    "type": "integer"
                },
                "usd": {
                    "type": "number"
                }
            }
        },
        "v1.coin": {
            "type": "object",
            "properties": {
                "address": {
                    "type": "string"
                },
                "de_fi": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/v1.deFi"
                        }
                    }
                },
                "large_image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "small_image": {
                    "type": "string"
                },
                "thumb_image": {
                    "type": "string"
                },
                "usd": {
                    "type": "number"
                }
            }
        },
        "v1.deFi": {
            "type": "object",
            "properties": {
                "apy": {
                    "type": "number"
                },
                "buy_coin": {
                    "$ref": "#/definitions/v1.coin"
                },
                "liquidity": {
                    "type": "number"
                },
                "liquidity_pool": {
                    "$ref": "#/definitions/v1.liquidityPool"
                }
            }
        },
        "v1.epoch": {
            "type": "object",
            "properties": {
                "end_epoch": {
                    "type": "string"
                },
                "epoch": {
                    "type": "integer"
                },
                "progress": {
                    "type": "integer"
                },
                "slots_in_epoch": {
                    "type": "integer"
                },
                "sps": {
                    "type": "number"
                }
            }
        },
        "v1.governance": {
            "type": "object",
            "properties": {
                "blockchain": {
                    "type": "string"
                },
                "circulating_supply": {
                    "type": "number"
                },
                "contract_address": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "maximum_token_supply": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "symbol": {
                    "type": "string"
                },
                "usd": {
                    "type": "number"
                },
                "vote_url": {
                    "type": "string"
                },
                "web_site_url": {
                    "type": "string"
                }
            }
        },
        "v1.liquidityPool": {
            "type": "object",
            "properties": {
                "about": {
                    "type": "string"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "v1.pool": {
            "type": "object",
            "properties": {
                "active_stake": {
                    "type": "number"
                },
                "address": {
                    "type": "string"
                },
                "apy": {
                    "type": "number"
                },
                "avg_score": {
                    "type": "integer"
                },
                "avg_skipped_slots": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "delinquent": {
                    "type": "integer"
                },
                "deposit_fee": {
                    "type": "number"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rewards_fee": {
                    "type": "number"
                },
                "staking_accounts": {
                    "type": "integer"
                },
                "tokens_supply": {
                    "type": "number"
                },
                "total_sol": {
                    "type": "number"
                },
                "unstake_liquidity": {
                    "type": "number"
                },
                "validators": {
                    "type": "integer"
                },
                "withdrawal_fee": {
                    "type": "number"
                }
            }
        },
        "v1.poolMainPage": {
            "type": "object",
            "properties": {
                "active_stake": {
                    "type": "number"
                },
                "address": {
                    "type": "string"
                },
                "apy": {
                    "type": "number"
                },
                "avg_score": {
                    "type": "integer"
                },
                "avg_skipped_slots": {
                    "type": "number"
                },
                "currency": {
                    "type": "string"
                },
                "delinquent": {
                    "type": "integer"
                },
                "deposit_fee": {
                    "type": "number"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "rewards_fee": {
                    "type": "number"
                },
                "staking_accounts": {
                    "type": "integer"
                },
                "tokens_supply": {
                    "type": "number"
                },
                "total_sol": {
                    "type": "number"
                },
                "unstake_liquidity": {
                    "type": "number"
                },
                "validators": {
                    "type": "integer"
                },
                "withdrawal_fee": {
                    "type": "number"
                }
            }
        },
        "v1.poolStatistic": {
            "type": "object",
            "properties": {
                "active_stake": {
                    "type": "number"
                },
                "apy": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "delinquent": {
                    "type": "integer"
                },
                "number_of_validators": {
                    "type": "integer"
                },
                "tokens_supply": {
                    "type": "number"
                },
                "total_sol": {
                    "type": "number"
                },
                "unstacked_liquidity": {
                    "type": "number"
                }
            }
        },
        "v1.validator": {
            "type": "object",
            "properties": {
                "apy": {
                    "type": "number"
                },
                "data_center": {
                    "type": "string"
                },
                "delinquent": {
                    "type": "boolean"
                },
                "epoch": {
                    "type": "integer"
                },
                "fee": {
                    "type": "number"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_pk": {
                    "type": "string"
                },
                "score": {
                    "type": "integer"
                },
                "skipped_slots": {
                    "type": "number"
                },
                "staking_accounts": {
                    "type": "integer"
                },
                "total_active_stake": {
                    "type": "number"
                },
                "vote_pk": {
                    "type": "string"
                }
            }
        },
        "v1.validatorData": {
            "type": "object",
            "properties": {
                "apy": {
                    "type": "number"
                },
                "data_center": {
                    "type": "string"
                },
                "fee": {
                    "type": "number"
                },
                "image": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "node_pk": {
                    "type": "string"
                },
                "pool_active_stake": {
                    "type": "number"
                },
                "score": {
                    "type": "integer"
                },
                "skipped_slots": {
                    "type": "number"
                },
                "staking_accounts": {
                    "type": "integer"
                },
                "total_active_stake": {
                    "type": "number"
                },
                "vote_pk": {
                    "type": "string"
                }
            }
        }
    },
    "x-extension-openapi": {
        "example": "value on a json format"
    }
}`

type swaggerInfo struct {
	Version     string
	Host        string
	BasePath    string
	Schemes     []string
	Title       string
	Description string
}

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = swaggerInfo{
	Version:     "",
	Host:        "",
	BasePath:    "/v1",
	Schemes:     []string{},
	Title:       "",
	Description: "",
}

type s struct{}

func (s *s) ReadDoc() string {
	sInfo := SwaggerInfo
	sInfo.Description = strings.Replace(sInfo.Description, "\n", "\\n", -1)

	t, err := template.New("swagger_info").Funcs(template.FuncMap{
		"marshal": func(v interface{}) string {
			a, _ := json.Marshal(v)
			return string(a)
		},
		"escape": func(v interface{}) string {
			// escape tabs
			str := strings.Replace(v.(string), "\t", "\\t", -1)
			// replace " with \", and if that results in \\", replace that with \\\"
			str = strings.Replace(str, "\"", "\\\"", -1)
			return strings.Replace(str, "\\\\\"", "\\\\\\\"", -1)
		},
	}).Parse(doc)
	if err != nil {
		return doc
	}

	var tpl bytes.Buffer
	if err := t.Execute(&tpl, sInfo); err != nil {
		return doc
	}

	return tpl.String()
}

func init() {
	swag.Register("swagger", &s{})
}
